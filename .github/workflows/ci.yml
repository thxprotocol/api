name: CI

on: push

jobs:
    buildAndTest:
        name: CI Pipeline
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Run dependencies
              run: docker compose -f docker-compose.ci.yml up api_ci_mongo api_ci_testnet -d

            - name: Run test
              run: |
                  docker-compose -f docker-compose.ci.yml run api_ci npm run test

            - name: Shut down dependencies
              run: docker compose -f docker-compose.ci.yml down

    deploy:
        name: CD Pipeline
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
        strategy:
            matrix:
                python-version: [3.8]
                node-version: ['16.x']
                appname: ['api']
                deploy-group: ['${{github.ref_name}}']
                s3-bucket: ['aws-deployments-api-${{github.ref_name}}']
                s3-filename: ['api-${{github.ref_name}}-${{ github.sha }}']

        needs: buildAndTest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Install Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Install dependencies
              run: npm install

            - name: Run build
              run: npm run build

            - name: Install AWS CLI 2
              run: |
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  unzip awscliv2.zip
                  rm awscliv2.zip
                  sudo ./aws/install --update

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-3

            # Deploy push to AWS S3
            - name: AWS Deploy push
              run: |
                  aws deploy push \
                  --application-name ${{ matrix.appname }} \
                  --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
                  --ignore-hidden-files \
                  --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
                  --source .

            # Create deployment to CodeDeploy
            - name: AWS Create Deployment
              run: |
                  aws deploy create-deployment \
                   --application-name ${{ matrix.appname }} \
                   --deployment-config-name CodeDeployDefault.OneAtATime \
                   --deployment-group-name ${{ matrix.deploy-group }} \
                   --file-exists-behavior OVERWRITE \
                   --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip \
                   --ignore-application-stop-failures \

    buildAndPushImage:
        name: Build and Push docker image
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || startsWith(github.ref,'refs/heads/hotfix/')
        needs: buildAndTest
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-3

            - name: Login to ECR
              uses: docker/login-action@v1
              with:
                  registry: 275440070213.dkr.ecr.eu-west-3.amazonaws.com

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: |
                      275440070213.dkr.ecr.eu-west-3.amazonaws.com/api
                  tags: |
                      type=ref,event=branch
                      type=sha

            - name: Build
              uses: docker/build-push-action@v2
              with:
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    autodeploy:
        name: Auto deploy main to dev.api.thx.network
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        needs: buildAndPushImage
        steps:
            - name: Install Node.js 16.x
              uses: actions/setup-node@v1
              with:
                  node-version: 16.x

            - name: Install deploy-scripts
              run: npm install -g thxprotocol/deploy-scripts

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}
                  aws-region: eu-west-3

            - name: Deploy-script
              run: thx-deploy ApiDev sha-$(echo ${{github.sha}} | cut -c1-7)
